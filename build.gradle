import java.nio.file.Paths

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
    dependencies {
        classpath "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
    }
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    sourceCompatibility = 1.6

    group 'com.github.xaguzman'
    version = '0.1.6-SNAPSHOT'
    ext{
        libBasename = 'gamedevlib'
        distDir = file( Paths.get(rootProject.rootDir.path, "dist/"))
    }
    def artifactName = "${libBasename}-${project.name}"
    def jarname = "${artifactName}-${version}"
    
    
    // jar{
    //     destinationDir = distDir
    // }
    // javadoc.options.addStringOption('Xdoclint:none', '-quiet')

    jar{
        archiveName "${jarname}.jar"
        // from sourceSets.main.allSource
        destinationDir = distDir
    }

    task javadocJar(type: Jar, dependsOn:javadoc){
        baseName =  "${jarname}"
        classifier = 'javadoc'
        // from javadoc, sourceSets.main.allSource
        destinationDir      = distDir
    }

    task sourcesJar(type: Jar, dependsOn:classes){
        baseName =  "${jarname}"
        classifier = 'sources'
        // from sourceSets.main.allSource
        destinationDir      = distDir
    }

    signing {
        // sign publishing.publications.maven
        sign configurations.archives
    }

    publishing {
        repositories {
            maven {
                name = 'FileRepo'
                url = "file://${distDir}/repo"
            }
            maven{
                name 'Nexus'
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }

                def releaseRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                 
                url = version.endsWith("SNAPSHOT") ? snapshotRepoUrl : releasesRepoUrl
             }
        }

        publications {
            maven(MavenPublication) {
                groupId = group
                artifactId = artifactName
                version = version

                from components.java

                artifact sourcesJar
                artifact javadocJar
            }
            println configurations.runtime.allDependencies
        }
    }

    signing {
        sign publishing.publications.maven
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

subprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    def subprojectName = "${libBasename}-${project.name}"
    def jarname = "${subprojectName}-${version}"
    eclipse.project.name = subprojectName

    jar{
        from sourceSets.main.output
    }

    javadocJar {
        from javadoc, sourceSets.main.output
    }

    sourcesJar{
        from sourceSets.main.allSource
    }

    
}

// Clearing Eclipse project data in root folder:
tasks.eclipse.doLast {
    delete '.project'
    delete '.classpath'
    delete '.settings/'
}




/****************************************
 * Single library jar containing all sub projects
 ****************************************/
//apply plugin: 'java'

subprojects.each { subproject -> evaluationDependsOn( subproject.path ) }
jar.dependsOn subprojects.tasks['classes']

jar{
    subprojects.each { subproject ->
         from subproject.sourceSets.main.output
    }
}

javadocJar{
    subprojects.each { subproject ->
         from subproject.javadoc, subproject.sourceSets.main.output
    }
}

sourcesJar{
    subprojects.each { subproject ->
         from subproject.sourceSets.main.allSource
    }
}

task cpy(type: Copy, dependsOn: [jar, sourcesJar]){
    def destination = "${rootDir.parent}/procedural_game/libs/"
    print("copying gamedevlib-all to $destination")

    from "$distDir/gamedevlib-gamedevlib-all-${version}.jar", "$distDir/gamedevlib-gamedevlib-all-${version}-${version}-sources.jar"

    rename { filename ->
        if (filename == "gamedevlib-gamedevlib-all-${version}.jar"){
            return "gamedevlib-all-${version}.jar"
        }
        if (filename == "gamedevlib-gamedevlib-all-${version}-${version}-sources.jar"){
            return "gamedevlib-all-${version}-sources.jar"
        }
    }

    into destination



}